*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package net.jc_mouse.unlockpattern;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
//import net.jc_mouse.demo.AppDemoJFrame;
/**
 * @web https://www.jc-mouse.net/
 * @author Mouse
 */
public class UnlockPanel extends JPanel implements MouseListener,MouseMotionListener {
        
    private JFrame parent;
    private String myKey="125895";//patron de desbloqueo
    //array para las 9 figuras que forman la matriz
    private ArrayList<FigurePattern> figurePatternArr = new ArrayList();
    //array para las figuras que conforman el patron desbloqueo
    private ArrayList<FigurePattern> pattern= new ArrayList();
    //String para guardar el patron generado por el usuario
    private String password = "";
    //para mostrar imagen de "acceso denegado"
    //private final Image //image = new ImageIcon(getClass().getResource("/net/jc_mouse/unlockpattern/access_denied.jpg")).getImage();
    private boolean showError=false;
    public char[] Ruta;
    public char[] RutaNueva;
    public int Longitud;
    public int Final1;
    public int Final2;
    public int Inicial1;
    public int Inicial2;
    public int Hacer;
    public int variable;
    public int id;
    public String taru;
    public String taruconvertida;
    public ArrayList<String> EnviarRuta = new ArrayList<String>();
    
    public String usuario ="root";
    public String clave="";;
    public String url="jdbc:mysql://localhost:3306/carroautonomo";
    public Connection con;
    public Statement stmt;
    public ResultSet rs;
    
    
    /**
     * Constructor de clas
     * @param parent JFrame que contiene el JPanel
     */
    public UnlockPanel(JFrame parent){                
        this.parent = parent;
        //se agregan 9 circulos al contenedor
        figurePatternArr.add(new FigurePattern(11,0,0));
        figurePatternArr.add(new FigurePattern(12,80,0));
        figurePatternArr.add(new FigurePattern(13,160,0));
        figurePatternArr.add(new FigurePattern(14,240,0));
        
        figurePatternArr.add(new FigurePattern(15,0,80));
        figurePatternArr.add(new FigurePattern(16,80,80));
        figurePatternArr.add(new FigurePattern(17,160,80));
        figurePatternArr.add(new FigurePattern(18,240,80));
        
        figurePatternArr.add(new FigurePattern(19,0,160));
        figurePatternArr.add(new FigurePattern(20,80,160));
        figurePatternArr.add(new FigurePattern(21,160,160));
        figurePatternArr.add(new FigurePattern(22,240,160));
        
        figurePatternArr.add(new FigurePattern(23,0,240));
        figurePatternArr.add(new FigurePattern(24,80,240));
        figurePatternArr.add(new FigurePattern(25,160,240));
        figurePatternArr.add(new FigurePattern(26,240,240));
        
        //Eventos del raton        
        UnlockPanel.this.addMouseListener( UnlockPanel.this );        
        UnlockPanel.this.addMouseMotionListener( UnlockPanel.this);        
    }
    
   @Override
    public void paintComponent(Graphics g){    
        Graphics2D g2 =(Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);            
        g2.setColor( new Color(0,0,0) );
        g2.fill(new Rectangle2D.Double(0,0,getWidth(),getHeight()));  
        
        //dibuja las lineas del patron de desbloqueo entre los circulos
        Point point = null;
        for(FigurePattern figurePattern: pattern){
            g2.setStroke( new BasicStroke( 20 ) );
            g2.setColor( new Color(204,204,204) );
            if(point!=null)
                g2.drawLine(point.x, point.y, figurePattern.getCenterPoint().x, figurePattern.getCenterPoint().y);  
             point = figurePattern.getCenterPoint();            
        }
        
        //dibuja los circulos para los patrones de desbloqueo       
        if(figurePatternArr!=null)
            figurePatternArr.stream().forEach((b) -> {
                b.draw(g2);
        });  
        
        //muestra error 
        if(showError){
            //g2.drawImage(image, (getWidth()-220)/2, (getHeight()-93)/2, 220, 93, null);         
        }  
        
    }

    @Override
    public void mouseClicked(MouseEvent e) {}

    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {  
       checkUnlockPattern();
    }

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}

    @Override
    public void mouseDragged(MouseEvent e) {
        //cuando se arrastra el cursor del mouse
        figurePatternArr.stream().filter((p) -> ( 
            FigurePattern.insideArea(p.getArea(),e.getPoint()) )).forEach((p) -> {
            if(this.pattern.isEmpty()){//Si esta vacio se a単ade objeto
                pattern.add(p);//a単ade a array
                p.setSelected(true);//cambia color
                password +=p.getKey();//concatena valor de figura
            }else{//Si ya existen objetos en el array
                //se comprueba que objeto nuevo no se repita con el ultimo a単adido
                if(pattern.get(pattern.size()-1).getKey() != p.getKey()){
                    pattern.add(p);//a単ade a array
                    p.setSelected(true);//cambia color
                    password +=p.getKey(); //concatena valor de figura
                }
            }
        });
        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) { showError=false; repaint();}
    
    /**
     * metodo para comprobar que patron de desbloqueo es correcto
     * de ser asi -> abre nuevo formulario
     * caso contrario -> muestra mensaje de error
     */
    public void checkUnlockPattern(){ 
        PreparedStatement ps;
        String sql;
        Ruta=password.toCharArray();
        Longitud=Ruta.length;
            Longitud--;
            Final1 = Character.getNumericValue(Ruta[Longitud-1]);
            Final2 = Character.getNumericValue(Ruta[Longitud]);
            Inicial1 = Character.getNumericValue(Ruta[0]);
            Inicial2 = Character.getNumericValue(Ruta[1]);
            if(Inicial1==2 && Inicial2==3){
                if(Final1==1 && Final2==4)
                {
                    
                     JOptionPane.showMessageDialog(null,
                "Ruta enviada",
                "PopUp Dialog",
                JOptionPane.INFORMATION_MESSAGE);
                     
                  taru=password;
                  
                  taruconvertida = conversorDeRuta(taru, 4);
                  //RutaLista();
                 
                 
                
                try {
                        Class.forName("com.mysql.cj.jdbc.Driver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(UnlockPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
        
                try {
                        con=DriverManager.getConnection(url,usuario,clave);
                        stmt=con.createStatement(); 
                        
                        stmt.executeUpdate("DELETE FROM carroaut");
                               
                            
                                sql = "INSERT INTO carroaut VALUES(?,?,?)";
                                ps = con.prepareStatement(sql);
                                id=1;
                                ps.setInt(1,id);
                                ps.setInt(2, 0);
                                ps.setString(3,taruconvertida);
                                ps.executeUpdate();
                                //stmt.executeUpdate("INSERT INTO carroaut VALUES(null,0,i)");
                                System.out.println(taruconvertida);
                            
                                
                            
                    } catch (SQLException ex) {
                        Logger.getLogger(UnlockPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                     
             } else{            
               //showError=true;
               JOptionPane.showMessageDialog(null,
                "El final de la ruta es incorrecta",
                "PopUp Dialog",
                JOptionPane.INFORMATION_MESSAGE);
            }
            } else{
                JOptionPane.showMessageDialog(null,
                "El inicio de la ruta es incorrecta",
                "PopUp Dialog",
                JOptionPane.INFORMATION_MESSAGE);
            }
        pattern.clear();//limpia movimientos antiguos
        password="";//resetea password
        //reinicia valor para objetos
        figurePatternArr.stream().forEach((b) -> {
            b.setSelected(false);
        });
        repaint();
        EnviarRuta.clear();
    }
    
    public void RutaLista(){
        RutaNueva=taruconvertida.toCharArray();
        for(int i=0;  i < (taruconvertida.length()-1) ; i+=2) {
    
              int a=Character.getNumericValue(RutaNueva[i])*10;
              int b=Character.getNumericValue(RutaNueva[i+1]);
              int c=a+b;
              System.out.println(c);
              switch(c) {
                  case 51: 
                  case 73:
                  case 15:
                  case 37: EnviarRuta.add("ADELANTE");break;
                  
                  case 62:
                  case 84:
                  case 26:
                  case 48: EnviarRuta.add("AVANZANDOH");break;
        
                  case 52: 
                  case 74:
                  case 16:
                  case 38: EnviarRuta.add("DERECHA45");EnviarRuta.add("AVANZANDOH");break;
                  
                  case 63:
                  case 85:
                  case 27:
                  case 41: EnviarRuta.add("DERECHA45");EnviarRuta.add("ADELANTE");break;
                         
                  case 53: 
                  case 75:
                  case 17:
                  case 31: EnviarRuta.add("RIGHT90");EnviarRuta.add("ADELANTE");break;
                  
                  case 64:
                  case 86:
                  case 28:
                  case 42: EnviarRuta.add("RIGHT90");EnviarRuta.add("AVANZANDOH");break;
                  
                  
                  case 54:
                  case 76:
                  case 18:
                  case 32:EnviarRuta.add("CERTO135");EnviarRuta.add("AVANZANDOH");break;
                  
                  case 65:
                  case 87:
                  case 21:
                  case 43:EnviarRuta.add("CERTO135");EnviarRuta.add("ADELANTE");break;
                  
                  case 58:
                  case 72:
                  case 14:
                  case 36:EnviarRuta.add("IZQUIERDA45");EnviarRuta.add("AVANZANDOH");break;
                  
                  case 61:
                  case 83:
                  case 25:
                  case 47:EnviarRuta.add("IZQUIERDA45");EnviarRuta.add("ADELANTE");break;
                  
                  case 57: 
                  case 71:
                  case 13:
                  case 35: EnviarRuta.add("LEFT90");EnviarRuta.add("ADELANTE");break;
                  
                  case 68:
                  case 82:
                  case 24:
                  case 46: EnviarRuta.add("LEFT90");EnviarRuta.add("AVANZANDOH");break;
                  
                  case 56:
                  case 78:
                  case 12:
                  case 34:EnviarRuta.add("DEIXEI135");EnviarRuta.add("AVANZANDOH");break;
                  
                  case 67:
                  case 81:
                  case 23:
                  case 45:EnviarRuta.add("DEIXEI135");EnviarRuta.add("ADELANTE");break;
                  
                  case 66:
                  case 88:
                  case 22:
                  case 44:EnviarRuta.add("180");EnviarRuta.add("AVANZANDOH");break;
                  
                  case 55:
                  case 77:
                  case 11:
                  case 33:EnviarRuta.add("180");EnviarRuta.add("ADELANTE");break;
                  
              }
           }
    }
    
    public String conversorDeRuta(String ruta, int columnas) {
        String rutaConvertida = "5";
        char[] aCaracteres = ruta.toCharArray();
        
        for (int i = 0; i < ruta.length()-2; i+=2) {
            int a = aCaracteres[i]*10+aCaracteres[i+1]-(aCaracteres[i+2]*10+aCaracteres[i+3]);
                
            if(a==1) {
                rutaConvertida += "7";if(i+1<ruta.length()-3){rutaConvertida+="3";}
            }else if(a==-1) {
                rutaConvertida += "3";if(i+1<ruta.length()-3){rutaConvertida+="7";}
            }else if(a==-columnas) {
                rutaConvertida += "5";if(i+1<ruta.length()-3){rutaConvertida+="1";}
            }else if(a==columnas) {
                rutaConvertida += "1";if(i+1<ruta.length()-3){rutaConvertida+="5";}
            }else if(a==-columnas-1) {
                rutaConvertida += "4";if(i+1<ruta.length()-3){rutaConvertida+="8";}
            }else if(a==columnas+1) {
                rutaConvertida += "8";if(i+1<ruta.length()-3){rutaConvertida+="4";}
            }else if(a==-columnas+1) {
                rutaConvertida += "6";if(i+1<ruta.length()-3){rutaConvertida+="2";}
            }else if(a==columnas-1) {
                rutaConvertida += "2";if(i+1<ruta.length()-3){rutaConvertida+="6";}
            }
        }
        return rutaConvertida;
    }

}//end
